#!{{ lookPath "sh" }}

# DEBIAN ------------------------------
{{ if eq .chezmoi.os "linux" -}}
{{ if or (eq .chezmoi.osRelease.id "debian") (eq .chezmoi.osRelease.id "ubuntu") -}}

echo "Install packages"

# need to install utils before everything else
sudo apt-get update -qq
for pkg in {{ range .commonpackages.aptsUtils -}} {{ . }} {{ end -}}; do
  if apt-cache show "$pkg" >/dev/null 2>&1; then
    echo "Installing $pkg..."
    sudo apt-get install -qqy "$pkg"
  else
    echo "Skipping $pkg (not found)"
  fi
done
sudo install -m 0755 -d /etc/apt/keyrings

# Docker
sudo rm -f /etc/apt/keyrings/docker.asc
sudo curl -fsSL https://download.docker.com/linux/{{ .chezmoi.osRelease.id }}/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/{{ .chezmoi.osRelease.id }} \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# eza
sudo rm -f /etc/apt/keyrings/gierens.gpg
wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | sudo gpg --dearmor -o /etc/apt/keyrings/gierens.gpg
echo "deb [signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main" | sudo tee /etc/apt/sources.list.d/gierens.list
sudo chmod 644 /etc/apt/keyrings/gierens.gpg /etc/apt/sources.list.d/gierens.list

# brave-browser
sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main"|sudo tee /etc/apt/sources.list.d/brave-browser-release.list

# wezterm
curl -fsSL https://apt.fury.io/wez/gpg.key | sudo gpg --yes --dearmor -o /usr/share/keyrings/wezterm-fury.gpg
echo 'deb [signed-by=/usr/share/keyrings/wezterm-fury.gpg] https://apt.fury.io/wez/ * *' | sudo tee /etc/apt/sources.list.d/wezterm.list

# packages
sudo apt-get update -qq
for pkg in {{ range .commonpackages.apts -}} {{ . }} {{ end -}}; do
  if apt-cache show "$pkg" >/dev/null 2>&1; then
    echo "Installing $pkg..."
    sudo apt-get install -qqy "$pkg"
  else
    echo "Skipping $pkg (not found)"
  fi
done

{{- if eq .GUI "yes" }}
for pkg in {{ range .commonpackages.aptsGUI -}} {{ . }} {{ end -}}; do
  if apt-cache show "$pkg" >/dev/null 2>&1; then
    echo "Installing $pkg..."
    sudo apt-get install -qqy "$pkg"
  else
    echo "Skipping $pkg (not found)"
  fi
done
{{- end }}

{{- if eq .where "home" }}
for pkg in {{ range .personalpackages.apts -}} {{ . }} {{ end -}}; do
  if apt-cache show "$pkg" >/dev/null 2>&1; then
    echo "Installing $pkg..."
    sudo apt-get install -qqy "$pkg"
  else
    echo "Skipping $pkg (not found)"
  fi
done
{{- end }}

{{- if eq .where "work" }}
for pkg in {{ range .workpackages.apts -}} {{ . }} {{ end -}}; do
  if apt-cache show "$pkg" >/dev/null 2>&1; then
    echo "Installing $pkg..."
    sudo apt-get install -qqy "$pkg"
  else
    echo "Skipping $pkg (not found)"
  fi
done
{{- end }}

# bitwarden cli
if type bw > /dev/null; then
  echo 'info: bw is already installed'
else
  curl -L "https://vault.bitwarden.com/download/?app=cli&platform=linux" -o bw.zip
  unzip bw.zip -d ~/.local/bin/
  rm bw.zip
fi

# starship
if type starship > /dev/null; then
  echo 'info: starship is already installed'
else
  curl -sS https://starship.rs/install.sh | sh -s -- -y
fi

# atuin
if type atuin > /dev/null; then
  echo 'info: atuin is already installed'
else
  curl --proto '=https' --tlsv1.2 -sSf https://setup.atuin.sh | bash
fi

# fnm
if type fnm > /dev/null; then
  echo 'info: fnm is already installed'
else
  curl -fsSL https://fnm.vercel.app/install | bash -s -- --install-dir "$HOME/.local/bin" --skip-shell
fi

# neovim
if type nvim > /dev/null; then
  echo 'info: nvim is already installed'
else
  curl -LO https://github.com/neovim/neovim/releases/latest/download/{{.nvimrelease}}.tar.gz
  sudo rm -rf /opt/nvim
  sudo tar -C /opt -xzf {{.nvimrelease}}.tar.gz
  rm {{.nvimrelease}}.tar.gz
fi

# lazydocker
if type lazydocker > /dev/null; then
  echo 'info: lazydocker is already installed'
else
  curl https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash
fi

# lazygit
if type lazygit > /dev/null; then
  echo 'info: lazygit is already installed'
else
  LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
  curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
  tar xf lazygit.tar.gz lazygit
  sudo install lazygit /usr/local/bin
  rm lazygit.tar.gz lazygit
fi

# git-delta
if type delta > /dev/null; then
  echo 'info: lazygit is already installed'
else
  DELTA_VERSION=$(curl -s "https://api.github.com/repos/dandavison/delta/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
  curl -Lo git-delta.deb "https://github.com/dandavison/delta/releases/download/${DELTA_VERSION}/git-delta_${DELTA_VERSION}_$(dpkg --print-architecture).deb"
  sudo dpkg -i git-delta.deb
  rm git-delta.deb
fi

# Docker postinstall
sudo groupadd docker
sudo usermod -aG docker $USER

# fd postinsall
ln -s $(which fdfind) ~/.local/bin/fd

# zsh by default
if type zsh > /dev/null; then
  if [ -n "`$SHELL -c 'echo $ZSH_VERSION'`" ]; then
    echo 'Shell is already zsh'
  else
    chsh -s $(which zsh)
  fi
else
  echo 'info: zsh is not installed'
fi

{{ end -}}

{{ end }}
